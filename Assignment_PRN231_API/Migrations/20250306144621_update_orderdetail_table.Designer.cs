// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_VS.Data;

#nullable disable

namespace Assignment_PRN231_API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250306144621_update_orderdetail_table")]
    partial class update_orderdetail_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment_PRN231_API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "46cfd47c-3e70-4019-8ab2-f56be21da33d",
                            AccessFailedCount = 0,
                            Age = 40,
                            Birthday = new DateTime(1984, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4c247458-3b39-404f-9d02-f9665eeb51c1",
                            Email = "owner1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER1@EXAMPLE.COM",
                            NormalizedUserName = "OWNER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZ2RVO/L7xKvHeky7mkamf4addxepWUQPWUz4PAxtblb9/XcktPu5fnJIYdh/1Lng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef6a05c8-3e14-4e91-8ecc-5246e28f1d07",
                            TwoFactorEnabled = false,
                            UserName = "owner1"
                        },
                        new
                        {
                            Id = "7151b7d6-c6b2-4893-a875-6d26a33aaabf",
                            AccessFailedCount = 0,
                            Age = 28,
                            Birthday = new DateTime(1996, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ed94f8d0-6b77-42cd-bd8e-2cbc1aba90c4",
                            Email = "staff1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Tran",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF1@EXAMPLE.COM",
                            NormalizedUserName = "STAFF1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMHdYlMBVLgoYIyPWBsrJGkpRB/k1pMN/bbemznOz7x7HkEHoygRK0hxbIMxRmEnOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0d1f4f1-b207-4273-a25c-70ef310d6936",
                            TwoFactorEnabled = false,
                            UserName = "staff1"
                        },
                        new
                        {
                            Id = "23b2ca44-0cb7-4995-92c0-70729727b98f",
                            AccessFailedCount = 0,
                            Age = 35,
                            Birthday = new DateTime(1989, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5c319e30-53c1-4ea5-b265-c4e69841ff92",
                            Email = "manager1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Charlie",
                            LastName = "Pham",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEL8BJtazV3LH+qts40oTzjO9gUoxPs7gg3J6KqAedCZs2QyH6VD9zBO7gZuHy6oR1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32b5a5ca-bae9-4d91-9003-48f66efa6ca7",
                            TwoFactorEnabled = false,
                            UserName = "manager1"
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Coffee"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Tea"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Juice"
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Unit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            IngredientName = "Coffee Beans",
                            Unit = 100.0m
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Inventory", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ShopId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTime(2025, 3, 3, 14, 46, 20, 414, DateTimeKind.Utc).AddTicks(2916),
                            OrderStatus = "Completed",
                            PaymentId = "PAY001",
                            TotalAmount = 150.00m,
                            UserId = "7151b7d6-c6b2-4893-a875-6d26a33aaabf"
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTime(2025, 3, 4, 14, 46, 20, 414, DateTimeKind.Utc).AddTicks(2922),
                            OrderStatus = "Pending",
                            PaymentId = "PAY001",
                            TotalAmount = 220.00m,
                            UserId = "7151b7d6-c6b2-4893-a875-6d26a33aaabf"
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            SubTotal = 75m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 1,
                            ProductId = 1,
                            SubTotal = 75m
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 2,
                            ProductId = 1,
                            SubTotal = 120m
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = "PAY001",
                            OrderId = 1,
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Completed"
                        },
                        new
                        {
                            PaymentId = "PAY002",
                            OrderId = 2,
                            PaymentMethod = "Cash",
                            PaymentStatus = "Pending"
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Image = "espresso.jpg",
                            IsActive = 1,
                            Price = 3.5m,
                            ProductName = "Espresso",
                            Quantity = 100,
                            RecipeId = 1,
                            Size = 250
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            Description = "Classic espresso recipe",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.RecipeDetail", b =>
                {
                    b.Property<int>("RecipeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeDetailId"), 1L, 1);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeDetailId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeDetails");

                    b.HasData(
                        new
                        {
                            RecipeDetailId = 1,
                            IngredientId = 1,
                            Quantity = 50.0m,
                            RecipeId = 1
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            ShopId = 1,
                            Address = "123 Main St",
                            Name = "Shop A",
                            PhoneNumber = "0123456789"
                        },
                        new
                        {
                            ShopId = 2,
                            Address = "456 Elm St",
                            Name = "Shop B",
                            PhoneNumber = "0987654321"
                        });
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("TableId");

                    b.HasIndex("ShopId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.TableOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("TableId");

                    b.ToTable("TableOrders");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.UserShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("UserShops");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Role = "Manager",
                            ShopId = 1,
                            UserId = "23b2ca44-0cb7-4995-92c0-70729727b98f"
                        },
                        new
                        {
                            Id = -2,
                            Role = "Manager",
                            ShopId = 2,
                            UserId = "23b2ca44-0cb7-4995-92c0-70729727b98f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "760b207e-7498-4fee-a596-59db41fcbcad",
                            ConcurrencyStamp = "e5312a71-7423-4050-9572-e1f792e52b04",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "d4be3786-6b66-49ac-a93f-04fa1a9b0907",
                            ConcurrencyStamp = "d3c5438b-1cb6-4ef9-9f0c-21288d837cc0",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "1cefdb69-5a92-4373-b7a2-ac749381f13f",
                            ConcurrencyStamp = "1ff122cf-b432-4ba5-bb78-314c8a702993",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "46cfd47c-3e70-4019-8ab2-f56be21da33d",
                            RoleId = "760b207e-7498-4fee-a596-59db41fcbcad"
                        },
                        new
                        {
                            UserId = "7151b7d6-c6b2-4893-a875-6d26a33aaabf",
                            RoleId = "d4be3786-6b66-49ac-a93f-04fa1a9b0907"
                        },
                        new
                        {
                            UserId = "23b2ca44-0cb7-4995-92c0-70729727b98f",
                            RoleId = "1cefdb69-5a92-4373-b7a2-ac749381f13f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Inventory", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Order", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.OrderDetail", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Product", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Recipe", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Product", "Product")
                        .WithMany("Recipes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.RecipeDetail", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.Recipe", "Recipe")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Table", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Shop", "Shop")
                        .WithMany("Tables")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.TableOrder", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.UserShop", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.Shop", "Shop")
                        .WithMany("UserShops")
                        .HasForeignKey("ShopId");

                    b.HasOne("Assignment_PRN231_API.Models.AppUser", "User")
                        .WithMany("UserShops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_PRN231_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Assignment_PRN231_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.AppUser", b =>
                {
                    b.Navigation("UserShops");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Ingredient", b =>
                {
                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Recipe", b =>
                {
                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Assignment_PRN231_API.Models.Shop", b =>
                {
                    b.Navigation("Tables");

                    b.Navigation("UserShops");
                });
#pragma warning restore 612, 618
        }
    }
}
