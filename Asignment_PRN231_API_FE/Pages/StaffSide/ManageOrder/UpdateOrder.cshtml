@page
@model Asignment_PRN231_API_FE.Pages.StaffSide.ManageOrder.UpdateOrderModel
@{
    Layout = "_LayoutOrderMangement";
    ViewData["Title"] = "Cập nhật đơn hàng";
}

<div class="row g-4">
    <!-- Danh sách OrderDetail bên trái -->
    <div class="col-md-4">
        <div class="bg-white p-4 rounded shadow">
            <h2 class="fs-5 fw-semibold mb-4">Đơn hàng</h2>
            <div id="orderDetails"></div>
            <div class="d-flex justify-content-between mt-4 border-top pt-3">
                <span class="fw-bold">Tổng tiền:</span>
                <span id="totalAmount" class="fw-bold">0</span>
            </div>
            <button id="updateOrderBtn" class="mt-4 w-100 btn btn-success">Update Order</button>
        </div>
    </div>

    <!-- Danh sách sản phẩm bên phải -->
    <div class="col-md-8">
        <div class="bg-white p-4 rounded shadow">
            <h2 class="fs-5 fw-semibold mb-4">Danh sách sản phẩm</h2>
            <div class="row g-3">
                @foreach (var product in Model.Products)
                {
                    <div class="col-md-3">
                        <div class="border p-2 rounded shadow-sm hover-shadow cursor-pointer h-100" onclick="addProduct(@product.ProductId, '@product.ProductName', @product.Price)">
                            <img src="@product.Image" alt="@product.ProductName" class="w-100 h-100 object-fit-cover rounded" />
                            <div class="mt-2 text-center">
                                <p class="fw-semibold mb-1">@product.ProductName</p>
                                <p class="text-muted small">@product.Price.ToString("N0")</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Radio buttons cho Table -->
<div class="mb-3">
    <label class="form-label">Table</label>
    @foreach (var table in Model.Tables)
    {
        <div class="form-check">
            <input class="form-check-input" type="radio" name="tableSelect" id="table@table.TableId" value="@table.TableId" @(table.TableId == Model.SelectedTableId ? "checked" : "")>
            <label class="form-check-label" for="table@table.TableId">
                @table.Name - @(table.Status ? "Busy" : "Available")
            </label>
        </div>
    }
</div>

<!-- Radio buttons cho Payment Method -->
<div class="mb-3">
    <label class="form-label">Payment Method</label>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCash" value="Cash" @(Model.SelectedPaymentMethod == "Cash" ? "checked" : "")>
        <label class="form-check-label" for="paymentCash">
            Cash
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentVNPay" value="VNPay" @(Model.SelectedPaymentMethod == "VNPay" ? "checked" : "")>
        <label class="form-check-label" for="paymentVNPay">
            VNPay
        </label>
    </div>
</div>


@section Scripts {
    <script>
        let orderDetails = [];

        function addProduct(productId, productName, price) {
            const existing = orderDetails.find(x => x.productId === productId);
            if (existing) {
                existing.quantity++;
            } else {
                orderDetails.push({ productId, productName, price, quantity: 1 });
            }
            renderOrder();
        }

        function increaseQty(productId) {
            const item = orderDetails.find(x => x.productId === productId);
            if (item) item.quantity++;
            renderOrder();
        }

        function decreaseQty(productId) {
            const item = orderDetails.find(x => x.productId === productId);
            if (item && item.quantity > 1) {
                item.quantity--;
            } else {
                orderDetails = orderDetails.filter(x => x.productId !== productId);
            }
            renderOrder();
        }

        function removeProduct(productId) {
            orderDetails = orderDetails.filter(x => x.productId !== productId);
            renderOrder();
        }

        function renderOrder() {
            let html = '';
            let total = 0;
            orderDetails.forEach(item => {
                let sub = item.price * item.quantity;
                total += sub;
                html += `
                            <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                                <div>
                                    <p class="fw-semibold mb-1">${item.productName}</p>
                                    <p class="text-muted small">${item.price.toLocaleString()} x ${item.quantity}</p>
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <button onclick="decreaseQty(${item.productId})" class="btn btn-sm btn-outline-secondary">-</button>
                                    <span>${item.quantity}</span>
                                    <button onclick="increaseQty(${item.productId})" class="btn btn-sm btn-outline-secondary">+</button>
                                    <button onclick="removeProduct(${item.productId})" class="btn btn-sm btn-outline-danger">🗑</button>
                                </div>
                            </div>
                        `;
            });
            document.getElementById("orderDetails").innerHTML = html;
            document.getElementById("totalAmount").innerText = total.toLocaleString();
        }

        // Lấy thông tin Order từ API khi mở trang UpdateOrder
        async function getOrderDetails(orderId) {
            const response = await fetch(`https://localhost:7079/staff/GetOrderById/${orderId}`);
            if (response.ok) {
                const order = await response.json();
                orderDetails = order.orderDetails.map(item => ({
                    productId: item.productId,
                    productName: item.productName,
                    price: item.subTotal / item.quantity,
                    quantity: item.quantity
                }));
                renderOrder();
            } else {
                alert("❌ Đơn hàng không tồn tại.");
            }
        }

        // Khi nhấn Update Order
        document.getElementById("updateOrderBtn").addEventListener("click", async () => {
            const orderId = @Model.OrderId; // Lấy OrderId từ model

            // Lấy giá trị của radio button cho Table
            const tableId = document.querySelector('input[name="tableSelect"]:checked')?.value;
            if (!tableId) {
                alert("❌ Bạn chưa chọn bàn.");
                return;
            }

            // Lấy giá trị của radio button cho Payment Method
            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
            if (!paymentMethod) {
                alert("❌ Bạn chưa chọn phương thức thanh toán.");
                return;
            }

            const response = await fetch(`https://localhost:7079/staff/UpdateOrderInfo/${orderId}`, {
                method: "PUT",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: "e151c6fa-e91f-49fe-9a9a-a1bf373983e6",  // Lấy từ session hoặc input đăng nhập của người dùng
                    tableId: tableId,  // Lấy tableId từ radio button
                    orderDetails: orderDetails.map(x => ({
                        productId: x.productId,
                        quantity: x.quantity
                    })),
                    paymentMethod: paymentMethod  // Lấy paymentMethod từ radio button
                })
            });

            if (response.ok) {
                alert("✅ Cập nhật đơn hàng thành công!");
                window.location.href = '/StaffSide/ManageOrder/ViewOrder';  // Điều hướng đến trang danh sách đơn hàng
            } else {
                alert("❌ Đã có lỗi khi cập nhật đơn hàng.");
            }
        });

    </script>
}
